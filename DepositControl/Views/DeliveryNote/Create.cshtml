@model DepositControl.Bussines.DeliveryNote

@{
    Layout = "~/Views/Shared/_LayoutBcri.cshtml";
    List<SelectListItem> productList = (List<SelectListItem>)ViewBag.ProductList;
    List<SelectListItem> stateList = (List<SelectListItem>)ViewBag.StateDeliveryNoteList;
    
}

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Crear Remito</title>
</head>
<body>
    @if (ViewBag.Alert != null)
    {
        <div class="alert alert-dismissable alert-danger">
            <button type="button" class="close" data-dismiss="alert">×</button>
            <strong>Error!</strong> @ViewBag.Alert
        </div>
    }

    @using (Html.BeginForm("Create", "DeliveryNote", FormMethod.Post, new { @id = "deliveryNoteForm", enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h1><b>Crear Remito</b></h1>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="form-group">
        @Html.LabelFor(model => model.Date, "Fecha", new { @class = "control-label col-sm-1", @style = "text-align:left;" })
        <div class="col-sm-3">
            <div class="input-group">
                @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control", @type = "date" } })
                <span class="input-group-addon" title="Ingrese la fecha que figura en el remito físico." style="background:transparent; border:none">
                    <i class="fa fa-exclamation-circle" style="cursor: pointer;"></i>
                </span>
            </div>
            @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Number, "Número", new { @class = "control-label col-sm-1", @style = "text-align:left;" })
        <div class="col-sm-3">
            <div class="input-group">
                @Html.TextBoxFor(model => model.Number, new { @class = "form-control", maxlength = "8", placeholder = "Ingrese el número del remito" })
                <span class="input-group-addon" title="Ingrese el número que aparece en el remito físico." style="background:transparent; border:none">
                    <i class="fa fa-exclamation-circle" style="cursor: pointer;"></i>
                </span>
            </div>
            @Html.ValidationMessageFor(model => model.Number, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.StateDeliveryNote, "Estado", new { @class = "control-label col-sm-1", @style = "text-align:left;" })
        <div class="col-sm-3">
            @Html.DropDownList("StateDeliveryNote", stateList, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.StateDeliveryNote, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.FileDeliveryNote, "Archivo PDF", new { @class = "control-label col-sm-1", @style = "text-align:left;" })
        <div class="col-sm-3">
            <input type="file" name="file" accept=".pdf" class="form-control" id="FileDeliveryNote" />
            @Html.ValidationMessageFor(model => model.FileDeliveryNote, "", new { @class = "text-danger" })
            <span id="fileError" class="text-danger" style="display:none;"></span>
        </div>
    </div>

    <br />
    <h4>Detalles</h4>
    <table class="table" id="detailsTable">
        <thead>
            <tr>
                <th>Producto</th>
                <th>Cantidad</th>
                <th>Precio</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    @Html.DropDownList("Details[0].Product", productList, new { @class = "form-control product-select" })
                    @Html.ValidationMessage("Details[0].Product", "", new { @class = "text-danger" })
                </td>
                <td>
                    @Html.TextBox("Details[0].Quantity", null, new { @class = "form-control quantity-input", @type = "number", @min = "1" })
                    @Html.ValidationMessage("Details[0].Quantity", "", new { @class = "text-danger" })
                </td>
                <td>
                    @Html.TextBox("Details[0].Price", null, new { @class = "form-control price-input", @type = "number", @step = "0.01", @readonly = "readonly" })
                </td>
                <td class="text-right">
                    <button type="button" class="btn btn-default removeDetail">Eliminar</button>
                </td>
            </tr>
        </tbody>
    </table>
    <div class="form-group text-right">
        <div class="col-md-12">
            <button type="button" id="addDetail" class="btn btn-default">Agregar Detalle</button>
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-12">
            <div class="col-md-7 text-right">
                @Html.LabelFor(model => model.TotalAmount, "Monto Total", new { @class = "control-label" })
            </div>
            <div class="col-sm-3">
                @Html.TextBoxFor(model => model.TotalAmount, new { @class = "form-control", @type = "number", @step = "0.01", @readonly = "readonly", @id = "TotalAmount" })
                @Html.ValidationMessageFor(model => model.TotalAmount, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        <div class="col-sm-4 col-sm-offset-8 text-right">
            <input type="submit" value="Crear" class="btn btn-default" />
        </div>
    </div>
</div>
    }

    <div>
        @Html.ActionLink("Volver a la Grilla", "Index", "DeliveryNote")
    </div>

    @section Scripts {
        @Scripts.Render("~/bundles/jquery")
        @Scripts.Render("~/bundles/jqueryval")

<script>
            const productPrices = @Html.Raw(Json.Encode(ViewBag.ProductPrices));
            const productList = @Html.Raw(Json.Encode(ViewBag.ProductList));


            $(document).ready(function () {
                function calculateTotal() {
                    let total = 0;
                    $('#detailsTable tbody tr').each(function () {
                        let quantity = parseFloat($(this).find('.quantity-input').val()) || 0;
                        let price = parseFloat($(this).find('.price-input').val()) || 0;
                        total += quantity * price;
                    });
                    $('#TotalAmount').val(total.toFixed(2));
                }

                function getSelectedProducts() {
                    let selected = [];
                    $('#detailsTable tbody tr').each(function () {
                        let productId = $(this).find('.product-select').val();
                        if (productId && productId !== '') {
                            selected.push(productId);
                        }
                    });
                    return selected;
                }

                function updateProductOptions(selectElement, selectedProducts, selectedValue) {
                    selectElement.empty();

                    productList.forEach(function (item) {
                        if (!selectedProducts.includes(item.Value) || item.Value === selectedValue) {
                            selectElement.append(
                                $('<option></option>').val(item.Value).text(item.Text)
                            );
                        }
                    });

                    if (selectedValue) {
                        selectElement.val(selectedValue);
                    }
                }

                function updateAllProductSelects() {
                    let selectedProducts = getSelectedProducts();
                    $('#detailsTable tbody tr').each(function () {
                        let select = $(this).find('.product-select');
                        let currentValue = select.val();
                        updateProductOptions(select, selectedProducts, currentValue);
                    });
                }

                $('#addDetail').click(function () {
                    let rowCount = $('#detailsTable tbody tr').length;
                    let newRow = $('#detailsTable tbody tr:first').clone();
                    newRow.find('input, select').val('');
                    newRow.find('select').prop('selectedIndex', 0);
                    newRow.find('select, input').each(function () {
                        let name = $(this).attr('name');
                        if (name) {
                            $(this).attr('name', name.replace('Details[0]', `Details[${rowCount}]`));
                        }
                    });
                    newRow.find('.text-danger').remove();
                    newRow.find('.price-input').val('');
                    $('#detailsTable tbody').append(newRow);
                    updateAllProductSelects();
                    calculateTotal();
                });

                $(document).on('click', '.removeDetail', function () {
                    if ($('#detailsTable tbody tr').length > 1) {
                        $(this).closest('tr').remove();
                        updateAllProductSelects();
                        calculateTotal();
                    }
                });

                $(document).on('input', '.quantity-input', function () {
                    calculateTotal();
                });

                $(document).on('change', '.product-select', function () {
                    let row = $(this).closest('tr');
                    let priceInput = row.find('.price-input');
                    let selectedProductId = $(this).val();

                    if (productPrices[selectedProductId]) {
                        priceInput.val(productPrices[selectedProductId].toFixed(2));
                    } else {
                        priceInput.val('');
                    }
                    updateAllProductSelects();
                    calculateTotal();
                });

                $('#FileDeliveryNote').on('change', function (e) {
                    var fileInput = this;
                    var fileError = $('#fileError');
                    fileError.hide().text('');

                    console.log('Archivo seleccionado:', fileInput.files);
                    console.log('Cantidad de archivos:', fileInput.files.length);

                    if (fileInput.files && fileInput.files.length > 0) {
                        var file = fileInput.files[0];
                        var fileSize = file.size;
                        var extension = file.name.split('.').pop().toLowerCase();

                        console.log('Nombre del archivo:', file.name);
                        console.log('Extensión:', extension);
                        console.log('Tamaño:', fileSize);

                        if (extension !== 'pdf') {
                            fileError.text('Solo se permiten archivos PDF.').show();
                            fileInput.value = '';
                            return;
                        }

                        if (fileSize > 1048576) {
                            fileError.text('El archivo no puede superar 1 MB.').show();
                            fileInput.value = '';
                            return;
                        }

                        
                        fileError.text('Archivo válido.').show().removeClass('text-danger').addClass('text-success');
                    } else {
                        fileError.text('Debe seleccionar un archivo PDF.').show().addClass('text-danger').removeClass('text-success');
                    }
                });

                
                $('#deliveryNoteForm').on('submit', function (e) {
                    var fileInput = $('#FileDeliveryNote')[0];
                    console.log('Validación de envío, archivos:', fileInput.files);

                    if (!fileInput.files || fileInput.files.length === 0) {
                        $('#fileError').text('Debe seleccionar un archivo PDF.').show().addClass('text-danger').removeClass('text-success');
                        e.preventDefault();
                    }
                });

                calculateTotal();
                updateAllProductSelects();

            });
</script>
    }
</body>
</html>